package main.java.com.vlad_kostromin.javacore.chapter10;

import java.util.Random;

public class Exceptions {
    public static void main(String[] args) {
        int d, f;
        //общая форма блока обработки исключений
        try { //блок кода, в котором отслеживаются ошибки
            d = 0;
            f = 42 / d;
            System.out.println("Это не будет выполненно");
        } catch(Exception e) { // тип исключения_1
            //обработчик исключения
            //перехватит ошибку деления на нуль
            System.out.println("Деление на нуль");
        } catch (Throwable e) { //тип исключения_2.
            //бработчик исключения
        } finally {
            //блок кода, который должен быть непременно выполнен по завершении блока try
        }
        //Применяя несколько операторов catch, важно помнить, что перехват исклю-
        //чений из подклассов должен следовать до перехвата исключений из суперклассов.
        //
        //Дело в том, что оператор са tch, в котором перехватывается исключение из супер-
        //класса, будет перехватывать все исключения из этого суперкласса, а также все ис-
        //ключения из его подклассов. Это означает, что исключения из подкласса вообще
        //
        //не будут обработаны, если попытаться перехватить их после исключений из его су-
        //перкласса. Кроме того, недостижимый код считается в Java ошибкой.
        System.out.println("После оператора catch");

        //Целью больбшинства правильно построенных операторов catch
        // явяется рзрешение искоючительных ситуаций и продолжение нормальной работы программы
        int a = 0, b = 0 ,c = 0;
        Random random = new Random();

        for (int i = 0; i < 32000; i++) {
            try {
                b = random.nextInt();
                c = random.nextInt();
                a = 12345 / (b/c);
            } catch (ArithmeticException e) {
                System.out.println("Деление на нуль.");
                a = 0; //присвоить нуль и продолжить работу
            }
            System.out.println("a: " + a);
        }

    }

}
